---
layout: layouts/home.njk
eleventyNavigation:
  key: Home
  order: 1
---

<section class='h-full bg-slate-100 flex flex-col items-center'>
  <div class='px-3 mb-2'>
    <h1 class='pt-4 sm:pt-8 px-8 text-slate-900 text-center text-3xl sm:text-4xl font-semibold mb-1'>Rapid Step 10</h1>
    <p class='text-slate-600 text-center leading-tight mb-2'>Do&nbsp;a&nbsp;complete&nbsp;Step&nbsp;10 spot check inventory&nbsp;in&nbsp;under&nbsp;three&nbsp;minutes.</p>
    <p class='bg-emerald-200  text-emerald-700 text-xs font-mono py-1 pl-2 px-3 rounded-lg mt-1 flex items-center'>
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class='mr-1' style='min-width:16px;' viewBox="0 0 256 256"><rect width="256" height="256" fill="none"></rect><line x1="40" y1="120" x2="216" y2="120" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></line><line x1="40" y1="152" x2="216" y2="152" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></line><line x1="40" y1="184" x2="216" y2="184" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></line><rect x="40" y="88" width="176" height="128" rx="8" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></rect><path d="M92,88V52a36,36,0,0,1,72,0V88" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></path></svg>
      Your details are secure and never leave your browser.
    </p>
  </div>

  <script>
    AFFECTS_MY__OPTIONS = [
      {
        name: 'Pride',
        definition: 'how I think others think of me'
      },
      {
        name: 'Self-Esteem',
        definition: 'how I think of myself'
      },
      {
        name: 'Finances',
        definition: 'desire for things'
      },
      {
        name: 'Personal relations',
        definition: 'relationships'
      },
      {
        name: 'Ambitions',
        definition: 'goals, plans, hopes'
      },
      {
        name: 'Emotional security',
        definition: 'sense of well-being'
      },
      {
        name: 'Sex relations',
        definition: 'drive for sexual intimacy'
      }
    ].map(pair => { 
      return {
        ...pair,
        id: encodeURIComponent(pair.name.toLowerCase())
      }
    })

    DEFECTS_AND_ASSET_PAIRS = [
      {
        defect: 'Selfishness',
        asset: 'Selflessness'
      },
      {
        defect: 'Resentment',
        asset: 'Forgiveness'
      },
      {
        defect: 'Fear',
        asset: 'Trusting my Higher Power'
      },
      {
        defect: 'Jealousy',
        asset: 'Goodwill, Gratitude'
      },
      {
        defect: 'Need to Control',
        asset: 'Letting Go'
      },
      {
        defect: 'Judgemental',
        asset: 'Tolerance'
      },
      {
        defect: 'Perfectionism',
        asset: 'Surrendering the results'
      },
      {
        defect: 'Codependency',
        asset: 'Healthy Detachment'
      },
      {
        defect: 'Projecting',
        asset: 'Staying on "my side of the street"'
      },
      {
        defect: 'Angry',
        asset: 'Calm'
      },
      {
        defect: 'Comparing myself to others',
        asset: 'Comparing myself to my past self'
      },
      {
        defect: 'Low Self Esteem',
        asset: 'Healthy Self Esteem'
      },
      {
        defect: 'Future-tripping',
        asset: 'Being Present'
      },
      {
        defect: 'Objectifying',
        asset: 'Viewing all as God\s children'
      },
      {
        defect: 'Self-hate',
        asset: 'Self-love'
      },
      {
        defect: 'Self-pity',
        asset: 'Acceptance, Gratitude'
      },
      {
        defect: 'Arrogance',
        asset: 'Humility'
      },
      {
        defect: 'Dishonesty',
        asset: 'Honesty'
      },
      {
        defect: 'Cowardice',
        asset: 'Courage'
      },
      {
        defect: 'Beating myself up',
        asset: 'Self-acceptance'
      },
      {
        defect: 'Fear of opening up',
        asset: 'Vulnerable'
      },
      {
        defect: 'Lazy',
        asset: 'Proactive'
      },
      {
        defect: 'Stubborn',
        asset: 'Flexible'
      },
      {
        defect: 'Irresponsible',
        asset: 'Responsible'
      },
      {
        defect: 'Greedy',
        asset: 'Generous'
      },
      {
        defect: 'Lustful',
        asset: 'Pure'
      },
      {
        defect: 'Complaining',
        asset: 'Acceptance'
      },
      {
        defect: 'Despair',
        asset: 'Acceptance'
      },
      {
        defect: 'Despair',
        asset: 'Acceptance'
      },
      {
        defect: 'Gluttony',
        asset: 'Healthy Eating'
      },
       {
        defect: 'Impatience',
        asset: 'Patience'
      },
      {
        defect: 'Distracted',
        asset: 'Focused'
      },
      {
        defect: 'Disobediant',
        asset: 'Respectful'
      },

    ].map(pair => { 
      return {
        ...pair,
        id: encodeURIComponent(pair.defect.toLowerCase())
      }
    }).sort(({defect: a},{defect:b}) => {
      if(a < b) return -1;
      if(a > b) return 1;
      return 0;
    });



    document.addEventListener('alpine:init',  function () {
      Alpine.data('app',  function () {
        return {
          AFFECTS_MY__OPTIONS,

          DEFECTS_AND_ASSET_PAIRS,
          
          timestamp:  new Date(),

          who:  this.$persist(''),
          what:  this.$persist(''),
          selectedAffectsMy:  this.$persist({}),
          selectedDefectAssetPairIds:  this.$persist({}),
          otherDefects:  this.$persist([]),
          otherAssets:  this.$persist([]),
          hasAmends:  this.$persist(false),
          amendsDetails:  this.$persist(''),

          resetButtonArmed: false,
          copyTextSucceeded: false,
          copyTextFailed: false,
          

          toggleAffectsMy(id) {
            this.selectedAffectsMy[id] = this.selectedAffectsMy[id] ? false : true;
          },

          toggleDefectAssetPair(id) {
            this.selectedDefectAssetPairIds[id] = this.selectedDefectAssetPairIds[id] ? false : true;
          },


          findAffectsMyById(id) {
            return this.AFFECTS_MY__OPTIONS.find(p => p.id == id)
          },

          findDefectAssetPairById(id) {
            return this.DEFECTS_AND_ASSET_PAIRS.find(p => p.id == id)
          },

        

          get selectedDefectAssetPairs() {
            return this.selectObjectKeysWithTruthyValues(this.selectedDefectAssetPairIds).
              map(this.findDefectAssetPairById)
          },

          get hasSelectedDefects() {
            return Object.keys(this.selectedDefectAssetPairs).length !== 0;
          },


          get defectString() {
            return this.joinStringArray(this.selectedDefectAssetPairs.map(p => p.defect));
          },

          get assetString() {
            return this.joinStringArray(this.selectedDefectAssetPairs.map(p => p.asset));
          },

          get affectsMyString() {
            const affectsMyItems = this.selectObjectKeysWithTruthyValues(this.selectedAffectsMy).
              map(this.findAffectsMyById).
              map(item => item.name);
            return this.joinStringArray(affectsMyItems);
          },


          joinStringArray(arr) {
            return this.addAndToLastArrayItem(arr).join(', ');
          },

          selectObjectKeysWithTruthyValues(obj) {
            return Object.entries(obj).
              filter(([k,v]) => v).
              map(([k,v]) => k);
          },

          addAndToLastArrayItem(arr) {
            if(arr.length < 2) return arr;
            const lastItem = arr.pop();
            arr.push('and ' + lastItem);
            return arr;
          },


          // Clipboard

          get clipboardText() {
            return `Step 10 Inventory\n${this.timestamp.toLocaleDateString()} ${this.timestamp.toLocaleTimeString()}\nWho?\n${this.who}\nWhat happened?\n${this.what}\nAffects my:\n${this.affectsMyString}\nMy defects:\n${this.defectString}\nCorresponding assets:\n${this.assetString}\n• Said the 7th Step prayer\n• ${this.hasAmends == 'yes' ? 'Requires amends\n' + this.amendsDetails : 'No amends needed'}\n• Need to share \n]nInventory complete!\n'Grant me strength, as I go out from here, to thy bidding, Amen!'`
          },

          setCopyTextSucceeded() {
            this.copyTextSucceeded = true;
            setTimeout(() => this.resetCopyTextStatusMessage(), 3000);
          },

          setCopyTextFailed() {
            this.copyTextFailed = true;
            setTimeout(() => this.resetCopyTextStatusMessage(), 3000);
          },

          resetCopyTextStatusMessage() {
            this.copyTextSucceeded = false;
            this.copyTextFailed = false;
          },


          // Reset button

          resetButtonClicked() {
            this.resetButtonArmed ? this.resetForm() : this.armResetButton();
          },

          armResetButton() {
            this.resetButtonArmed = true;
            setTimeout(() => this.disarmResetButton(), 4000);
          },

          disarmResetButton() {
            this.resetButtonArmed = false;
          },

          resetForm() {
            this.timestamp = new Date(),
            this.who = '';
            this.what = '';
            this.selectedAffectsMy = {};
            this.selectedDefectAssetPairIds = {};
            this.hasAmends = '';
            this.amendsDetails = '';
            this.resetButtonArmed = false
            window.scrollTo({
              top: 0,
              left: 0,
              behavior: 'smooth'
            })
          }
        } // end Alpine data object
      }) // end Alpine init function
    }); // end event listener

  </script>

  <form 
    id='app'
    x-data="app()"
    x-cloak
    @clipboard-success.window='setCopyTextSucceeded()'
    @clipboard-error.window='setCopyTextFailed()'
    class='bg-white shadow-lg p-4 sm:p-8 sm:pb-0 rounded-lg m-3 sm:m-4 max-w-xl'>
<!-- 
    <div class='inventory-type-picker'>
      <button type='button'>Resentment</button>
      <button type='button'>Fear</button>
      <button type='button'>Harm</button>
      <button type='button'>Shame</button>
      <button type='button'>Other</button>
    </div> -->


    <div class='form-group'>
      <h2>1. Who?</h2>
      <input x-model='who' type="text" name="who-field" id="who-field">
    </div>

     <div class='form-group'>
      <h2 class='mb-0'>2. What happened?</h2>
      <p class='hint'>19 words or less</p>
      <textarea x-model='what' name="what-field" id="what-field" cols="30" rows="3"></textarea>
    </div>

    <div class='form-group'>
      <h2>3. Affects my...</h2>
      <p class='hint'>Select all that apply</p>
      
      <template x-for="option in AFFECTS_MY__OPTIONS">
        <button type='button' class='card-option' @click='toggleAffectsMy(option.id)' :class='selectedAffectsMy[option.id] && "selected"'>
          <svg xmlns="http://www.w3.org/2000/svg" class='icon-md mr-1 transition-all text-blue-500' :class='selectedAffectsMy[option.id] ? "opacity-100" : "opacity-0"' fill="currentColor" viewBox="0 0 256 256"><rect width="256" height="256" fill="none"></rect><polyline points="172 104 113.3 160 84 132" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></polyline><circle cx="128" cy="128" r="96" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></circle></svg>
          <span class='title' x-text='option.name'>Pride</span>
          <!-- <span class='description'>(how I think others think of me)</span> -->
        </button>
      </template>
    </div>

     <div class='form-group'>
      <h2>4. My part</h2>
      <p class='hint'>Select as many character defects as you can!</p>
      <input type="search" name="" id="">
      
      <div class='mt-3 flex flex-wrap'>
        <template x-for="option in DEFECTS_AND_ASSET_PAIRS">
          <button 
            type='button'
            :id='"defect--" + option.id'
            class='defect-chip'
            x-text='option.defect'
            :class='selectedDefectAssetPairIds[option.id] && "selected"'
             @click='toggleDefectAssetPair(option.id)' 
            >
          </button>
        </template>
      </div>

    </div>

    <div class='form-group'>
      <h2>5. Character Assets</h2>
      <p class='hint'>Select as many as you can!</p>
      <input type="text" name="" id="">
      <div class='mt-3 flex flex-wrap'>
       <template x-for="option in DEFECTS_AND_ASSET_PAIRS">
          <button 
            type='button'
            :id='"asset--" + option.id'
            class='defect-chip'
            x-text='option.asset'
            :class='selectedDefectAssetPairIds[option.id] && "selected"'
             @click='toggleDefectAssetPair(option.id)' 
            >
          </button>
        </template>
      </div>
    </div>

    <div class='form-group'>
      <h2>6. 7th-Step Prayer</h2>
      <p class='hint'>Based on AA p. 73</p>

      <div x-show='!hasSelectedDefects'>
        <p class='px-4 py-8 rounded-lg border-2 border-dashed border-slate-200 text-semibold text-xl text-slate-300 text-center'>Select some defects to generate your prayer!</p>
      </div>

      <div class='flex items-start mt-3' x-show='hasSelectedDefects'>
        <p class='font-serif text-7xl mr-3 text-slate-300'>"</p>
        <div class='italic mt-1' >
          <p class=''><span class='font-bold'>My Creator</span>, I'm now willing that you have all of me, good and bad.</p>
          <p class=''>I pray that you now remove from me every single defect of character that stands in the way of my usefulness to you and my fellows. <span class='font-bold'>In particular:</span></p>
          
          <p class='mt-4'>Please take away my: </br>
          <span class='font-bold' x-text='defectString'>selfishness, dishonesty, fear, jealousy and judgementalism,</span>
          </p>

          <p class='mt-4'>and replace them with:</br><span class='font-bold' x-text='assetString'>selflessness, honesty, trust in God, goodwill and tolerance,</span></p>
          <p class='mt-4'>Grant me strength, as I go out from here, to do thy bidding.</br>Amen!</p>
        </div>
      </div>

    </div>

     <div class='form-group'>
      <h2>7. Amends</h2>
      <p class='hint'>
        Do you need to make an amends?
      </p>
      
      <input x-model='hasAmends' id='no-amends' type='radio' name='amends-required' value='no' class='appearance-none opacity-0 absolute'>
      <input x-model='hasAmends' id='yes-amends' type='radio' name='amends-required' value='yes' class='appearance-none opacity-0 absolute'>
      <div class='flex'>
        
          
          <label for='no-amends' class='selection-panel mr-1' :class='hasAmends == "no" && "selected"'>No</label>
        

          <label for='yes-amends' class='selection-panel ml-1' :class='hasAmends == "yes" && "selected"'>Yes</label>
        
      </div>

      <div x-collapse x-show='hasAmends == "yes"'>
        <p class='mb-1 font-semibold text-slate-700 mt-2'>Amends to make</p>
        <textarea x-model='amendsDetails' name="amend-details" id="amend-details" cols="30" rows="3" class='w-full'></textarea>
      </div>
     
    </div>

     <div class='form-group'>
      <h2>8. Share</h2>
      <p class='hint'>
        Remember to share your inventory with someone!
      </p>
     
    </div>

    <div class='form-group'>
      <h2>9. Done!</h2>
      <p class='hint'>
        Copy this inventory and paste it somewhere to save it for later, or clear it to start again.
      </p>
     
      <button
        type="button"
        id='copy-to-clipboard-button'
        class='text-sm hidden transition-all bg-gradient-to-br  filter hover:brightness-110  text-white py-2 rounded-lg mt-4 font-semibold'
        :class='{
          "from-green-600 to-green-700": !copyTextFailed && copyTextSucceeded, 
          "from-red-600 to-red-700": copyTextFailed, 
          "from-blue-500 to-blue-600": !copyTextFailed && !copyTextSucceeded }'
        :data-clipboard-text='clipboardText'>
        <span x-show='copyTextFailed'>Copy error</span>
        <span x-show='!copyTextFailed && copyTextSucceeded'>Copied!</span>
        <span x-show='!copyTextFailed && !copyTextSucceeded'>Copy to Clipboard</span>
      </button>

       <button
          @click='resetButtonClicked()'
          type="button"
          class='text-sm transition-all py-2 rounded-lg mt-4 font-semibold'
          :class='resetButtonArmed ? "text-white bg-red-500 hover:bg-red-600" : "text-blue-900 bg-slate-100 hover:bg-slate-200"'>
         <span x-show='!resetButtonArmed'>Clear form and start over</span>
         <span x-show='resetButtonArmed'>Are you sure?</span>
      </button>
    </div>
  <form>
</section>

<script>
   window.addEventListener('DOMContentLoaded', () => {
  


     const copyToClipboardButtonId = '#copy-to-clipboard-button';
     document.querySelector(copyToClipboardButtonId).classList.remove('hidden');
     var clipboard = new ClipboardJS(copyToClipboardButtonId);

     clipboard.on('success', function(e) {
       window.dispatchEvent(new CustomEvent('clipboard-success'));
        //console.info('Action:', e.action);
        //console.info('Text:', e.text);
        //console.info('Trigger:', e.trigger);
    });

    clipboard.on('error', function(e) {
      window.dispatchEvent(new CustomEvent('clipboard-error'));
      console.error('Action:', e.action);
      console.error('Trigger:', e.trigger);
    });
   });
</script>