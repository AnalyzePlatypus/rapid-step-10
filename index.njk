---
description:
layout: layouts/home.njk
pagination:
    data: configuredLanguages
    size: 1
    alias: lang
permalink: "{{ lang.path }}/"
---

    <p class='mb-2 sm:mb-4 mx-3 bg-blue-100 dark:bg-slate-700 dark:text-slate-200 text-slate-900 opacity-60 text-xs font-semibold font-mono py-2 pl-2 px-3 rounded-lg flex items-center justify-center'>
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class='mr-1.5' style='min-width:16px;' viewBox="0 0 256 256"><rect width="256" height="256" fill="none"></rect><line x1="40" y1="120" x2="216" y2="120" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></line><line x1="40" y1="152" x2="216" y2="152" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></line><line x1="40" y1="184" x2="216" y2="184" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></line><rect x="40" y="88" width="176" height="128" rx="8" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></rect><path d="M92,88V52a36,36,0,0,1,72,0V88" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></path></svg>
      {{ 'securityDisclaimer' | i18n(lang) }}
    </p>

  <script>
    AFFECTS_MY__OPTIONS = [
      {
        name: '{{ 'sectionOptionAffectsMyPride' | i18n(lang) }}',
        definition: 'how I think others think of me'
      },
      {
        name: '{{ 'sectionOptionAffectsMySelfEsteem' | i18n(lang) }}',
        definition: 'how I think of myself'
      },
      {
        name: '{{ 'sectionOptionAffectsMyFinances' | i18n(lang) }}',
        definition: 'desire for things'
      },
      {
        name: '{{ 'sectionOptionAffectsMyPersonalRelations' | i18n(lang) }}',
        definition: 'relationships'
      },
      {
        name: '{{ 'sectionOptionAffectsMyAmbitions' | i18n(lang) }}',
        definition: 'goals, plans, hopes'
      },
      {
        name: '{{ 'sectionOptionAffectsMyEmotionalSecurity' | i18n(lang) }}',
        definition: 'sense of well-being'
      },
      {
        name: '{{ 'sectionOptionAffectsMySexRelations' | i18n(lang) }}',
        definition: 'drive for sexual intimacy'
      }
    ].map(pair => {
      return {
        ...pair,
        id: encodeURIComponent(pair.name.toLowerCase())
      }
    })


    DEFECTS_AND_ASSET_PAIRS = {% embedDefectsAndAssets lang %}

    function isDefined(o) {
      return o !== undefined;
    }

    function uniq(arr) {
      return Array.from(new Set(arr));
    }


    document.addEventListener('alpine:init',  function () {
      Alpine.data('app',  function () {
        return {
          AFFECTS_MY__OPTIONS,

          DEFECTS_AND_ASSET_PAIRS,

          timestamp:  new Date(),

          who:  this.$persist(''),
          what:  this.$persist(''),
          selectedAffectsMy:  this.$persist({}),
          selectedDefectAssetPairIds:  this.$persist({}),
          otherDefects:  this.$persist(''),
          otherAssets:  this.$persist(''),
          hasAmends:  this.$persist(false),
          amendsDetails:  this.$persist(''),
          helpDetails: this.$persist(''),

          resetButtonArmed: false,
          copyTextSucceeded: false,
          copyTextFailed: false,

          defectListIsExpanded: false,
          assetListIsExpanded: false,


          toggleAffectsMy(id) {
            this.selectedAffectsMy[id] = this.selectedAffectsMy[id] ? false : true;
          },

          toggleDefectAssetPair(id) {
            this.selectedDefectAssetPairIds[id] = this.selectedDefectAssetPairIds[id] ? false : true;
          },


          findAffectsMyById(id) {
            return this.AFFECTS_MY__OPTIONS.find(p => p.id == id)
          },

          findDefectAssetPairById(id) {
            return this.DEFECTS_AND_ASSET_PAIRS.find(p => p.id == id)
          },


          toggleDefectExpansionState() {
            if(this.defectListIsExpanded) this.$refs.defectsHeader.scrollIntoView({block: "start", behavior:'auto'});
            this.defectListIsExpanded = !this.defectListIsExpanded;
          },

          toggleAssetExpansionState() {
            if(this.assetListIsExpanded) this.$refs.assetsHeader.scrollIntoView({block: "start", behavior:'auto'});
            this.assetListIsExpanded = !this.assetListIsExpanded;
          },



          get selectedDefectAssetPairs() {
            return this.selectObjectKeysWithTruthyValues(this.selectedDefectAssetPairIds).
              map(this.findDefectAssetPairById).
              filter(isDefined)
          },

          get hasSelectedDefects() {
            return Object.keys(this.selectedDefectAssetPairs).length !== 0 || this.otherDefects.length > 0;
          },


          get defectString() {
            const arr = this.selectedDefectAssetPairs.map(p => p.defect);
            arr.unshift(this.otherDefects)
            return this.joinStringArray(arr);
          },

          get assetString() {
            const arr = this.selectedDefectAssetPairs.map(p => p.asset);
            arr.unshift(this.otherAssets);
            return this.joinStringArray(arr);
          },

          get affectsMyString() {
            const affectsMyItems = this.selectObjectKeysWithTruthyValues(this.selectedAffectsMy).
              map(this.findAffectsMyById).
              map(item => item.name);
            return this.joinStringArray(affectsMyItems);
          },


          joinStringArray(arr) {
            const preparedArray = uniq(
              arr.
              map(s => {
                if(typeof s !== 'string') return;
                  return s.toLowerCase().trim().replace('god', 'God').replace('higher power','Higher Power')
                }).
              filter(isDefined)
            ).sort().
              filter(str => str.length > 0)
            return this.addAndToLastArrayItem(preparedArray).join(', ');
          },

          selectObjectKeysWithTruthyValues(obj) {
            return Object.entries(obj).
              filter(([k,v]) => v).
              map(([k,v]) => k);
          },

          addAndToLastArrayItem(arr) {
            if(arr.length < 2) return arr;
            const lastItem = arr.pop();
            arr.push('and ' + lastItem);
            return arr;
          },


          // Clipboard

          get clipboardText() {
            return `
{{ 'copiedInventoryTitle' | i18n(lang) }}$NL
${this.timestamp.toLocaleDateString()} ${this.timestamp.toLocaleTimeString()}$NL$NL
{{ 'copiedInventorySectionTitleWho' | i18n(lang) }}$NL
${this.who}$NL$NL
{{ 'copiedInventorySectionTitleWhat' | i18n(lang) }}$NL
${this.what}$NL$NL
{{ 'copiedInventorySectionTitleAffectsMy' | i18n(lang) }}$NL
${this.affectsMyString}$NL$NL
{{ 'copiedInventorySectionTitleMyDefects' | i18n(lang) }}$NL
${this.defectString}$NL$NL
{{ 'copiedInventorySectionTitleMyAssets' | i18n(lang) }}$NL
${this.assetString}$NL$NL
• {{ 'copiedInventorySaidThe7thStepPrayer' | i18n(lang) }}$NL
• ${this.hasAmends == 'yes' ? '{{ 'copiedInventoryStatusAmendsNeeded' | i18n(lang) }}:$NL' + this.amendsDetails : '{{ 'copiedInventoryStatusNoAmendsNeeded' | i18n(lang) }}'}$NL
• {{ 'copiedInventorySectionTitleNeedtoShare' | i18n(lang) }}$NL
• {{ 'copiedInventorySectionTitleICanHelp' | i18n(lang) }} ${this.helpDetails}$NL$NL
{{ 'copiedInventoryStatusInventoryComplete' | i18n(lang) }}$NL$NL
'{{ 'copiedInventoryClosingPrayer' | i18n(lang) }}'`.replaceAll("\t", "").replaceAll("\n", '').replaceAll("$NL", '\n');
          },

          setCopyTextSucceeded() {
            this.copyTextSucceeded = true;
            setTimeout(() => this.resetCopyTextStatusMessage(), 4000);
            window.launchConfetti();
          },

          setCopyTextFailed() {
            this.copyTextFailed = true;
            setTimeout(() => this.resetCopyTextStatusMessage(), 3000);
          },

          resetCopyTextStatusMessage() {
            this.copyTextSucceeded = false;
            this.copyTextFailed = false;
          },


          // Reset button

          resetButtonClicked() {
            this.resetButtonArmed ? this.resetForm() : this.armResetButton();
          },

          armResetButton() {
            this.resetButtonArmed = true;
            setTimeout(() => this.disarmResetButton(), 4000);
          },

          disarmResetButton() {
            this.resetButtonArmed = false;
          },

          get shareButtonSupported() {
            return navigator.share !== undefined;
          },

          shareButtonClicked() {
            if (navigator.share) {
              navigator.share({
                title: 'Step 10 Inventory',
                text: this.clipboardText
              }).then(() => {
                console.log('Sharing success');
              }).catch((error) => {
                console.log('Share cancelled')
                console.log(error)
              });
            }
          },

          resetForm() {

            this.timestamp = new Date(),
            this.who = '';
            this.what = '';
            this.selectedAffectsMy = {};
            this.selectedDefectAssetPairIds = {};
            this.otherDefects = '';
            this.otherAssets = '';
            this.hasAmends = '';
            this.amendsDetails = '';
            this.helpDetails = '';

            // Reset UI state
            this.resetButtonArmed = false
            this.defectListIsExpanded = false,
            this.assetListIsExpanded = false,

            // Scroll to top
            // Timeout bypasses a UI glitch in Safari
            setTimeout(() =>{
              window.scrollTo({
                top: 0,
                left: 0,
                behavior: 'smooth'
              })
            },30)

            this.fathomTrackGoal('0QRQEOZZ', 0);
          },

          fathomTrackGoal(id, value) {
            window.fathom && window.fathom.trackGoal(id, value);
          }
        } // end Alpine data object
      }) // end Alpine init function
    }); // end event listener

  </script>

  <form
    id='app'
    x-data="app()"
    x-cloak
    @clipboard-success.window='setCopyTextSucceeded()'
    @clipboard-error.window='setCopyTextFailed()'
    class='bg-white  dark:bg-slate-800 shadow-lg p-4 sm:p-8 sm:pb-0 rounded-lg m-3 sm:m-4 max-w-xl'>
<!--
    <div class='inventory-type-picker'>
      <button type='button'>Resentment</button>
      <button type='button'>Fear</button>
      <button type='button'>Harm</button>
      <button type='button'>Shame</button>
      <button type='button'>Other</button>
    </div> -->

    <div class='form-group'>
      <label class='h2' for='who-field'>1. {{ 'sectionTitleWho' | i18n(lang) }}</label>
      <p class='hint'>1. {{ 'sectionHintWho' | i18n(lang) }}</p>
      <textarea x-autosize x-model='who' type="text" name="who-field" id="who-field" rows="1"></textarea>
    </div>

     <div class='form-group'>
      <label class='h2 mb-0' for='what-field'>2. {{ 'sectionTitleWhat' | i18n(lang) }}</label>
      <p class='hint'>{{ 'sectionHintWhat' | i18n(lang) }}</p>
      <textarea x-autosize x-model='what' name="what-field" id="what-field" cols="30" rows="1"></textarea>
    </div>

    <div class='form-group'>
      <h2>3. {{ 'sectionTitleAffectsMy' | i18n(lang) }}</h2>
      <p class='hint'>{{ 'sectionHintAffectsMy' | i18n(lang) }}</p>

      <template x-for="option in AFFECTS_MY__OPTIONS">
        <button type='button' class='card-option' @click='toggleAffectsMy(option.id)' :class='selectedAffectsMy[option.id] && "selected"'>
          <svg xmlns="http://www.w3.org/2000/svg" class='icon-md mr-1 transition-all text-blue-500 dark:text-blue-400' :class='selectedAffectsMy[option.id] ? "opacity-100" : "opacity-0"' fill="currentColor" viewBox="0 0 256 256"><rect width="256" height="256" fill="none"></rect><polyline points="172 104 113.3 160 84 132" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></polyline><circle cx="128" cy="128" r="96" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></circle></svg>
          <span class='title' x-text='option.name'>Pride</span>
          <!-- <span class='description'>(how I think others think of me)</span> -->
        </button>
      </template>
    </div>

     <div class='form-group'>
      <h2 x-ref='defectsHeader' >4. {{ 'sectionTitleMyPart' | i18n(lang) }}</h2>
      <p class='hint'>{{ 'sectionHintMyPart' | i18n(lang) }}</p>


      <div x-collapse.min.90px x-show='defectListIsExpanded' class='mt-3 flex flex-wrap'>
        <template x-for="option in DEFECTS_AND_ASSET_PAIRS.sort(({defect: a},{defect: b}) => {
          if(a > b) return 1;
          if(a < b) return -1;
          return 0;
        })">
          <button
            type='button'
            :id='"defect--" + option.id'
            class='defect-chip dark:bg-opacity-40'
            x-text='option.defect'
            :class='selectedDefectAssetPairIds[option.id] && "selected"'
             @click='toggleDefectAssetPair(option.id)'
            >
          </button>
        </template>

        <textarea x-autosize x-model='otherDefects' class='w-full mb-4' type="text" name="custom-defects" id="custom-defects" placeholder='{{ 'inputPlaceholderMoreDefects' | i18n(lang) }}' rows='1'></textarea>
      </div>


      <div class='w-full flex flex-col items-center relative mb-4' :class='{"sticky bottom-4": defectListIsExpanded}'>

        <div class='z-0 w-full absolute border-t border-slate-300 dark:border-slate-700' :class='{"mt-4 opacity-0": defectListIsExpanded}'></div>

        <button type='button' class='button pr-6 pl-3 z-10' :class='{"mt-4": !defectListIsExpanded, "shadow-lg bg-opacity-50 backdrop-blur-md": defectListIsExpanded}' @click='toggleDefectExpansionState()'>

          <svg xmlns="http://www.w3.org/2000/svg" class='icon-sm mr-1 transform transition-all rotate-180 duration-700' :class='{"rotate-0": defectListIsExpanded}' fill="currentColor" viewBox="0 0 256 256"><rect width="256" height="256" fill="none"></rect><polyline points="48 160 128 80 208 160" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></polyline></svg>

          <span class='whitespace-nowrap'>
            <span x-show='!defectListIsExpanded'>
              {{ 'buttonLabelShowMore' | i18n(lang) }}
            </span>
            <span x-show='defectListIsExpanded'>
              {{ 'buttonLabelShowLess' | i18n(lang) }}
            </span>
          </span>

        </button>
      </div>




    </div>

    <div class='form-group'>
      <h2 x-ref='assetsHeader'>5. {{ 'sectionTitleCharacterAssets' | i18n(lang) }}</h2>
      <p class='hint'>{{ 'sectionHintCharacterAssets' | i18n(lang) }}</p>

      <div class='mt-3 flex flex-wrap' x-collapse.min.90px x-show='assetListIsExpanded'>
       <template x-for="option in DEFECTS_AND_ASSET_PAIRS.sort(({asset: a},{asset: b}) => {
          if(a > b) return 1;
          if(a < b) return -1;
          return 0;
        })">
          <button
            type='button'
            :id='"asset--" + option.id'
            class='defect-chip'
            x-text='option.asset'
            :class='selectedDefectAssetPairIds[option.id] && "selected"'
             @click='toggleDefectAssetPair(option.id)'
            >
          </button>
        </template>

        <textarea x-autosize class='w-full mb-4' x-model='otherAssets' type="text" name="custom-assets" id="custom-assets" placeholder='{{ 'inputPlaceholderMoreAssets' | i18n(lang) }}' rows='1'></textarea>
      </div>

        <div class='w-full flex flex-col items-center relative mb-4 sticky bottom-4' :class='{"sticky bottom-4": assetListIsExpanded}'>

        <div class='z-0 w-full absolute border-t border-slate-300 dark:border-slate-700' :class='{"mt-4 opacity-0": assetListIsExpanded}'></div>

        <button type='button' class='button pr-6 pl-3 z-10' :class='{"mt-4": !assetListIsExpanded, "shadow-lg bg-opacity-50 backdrop-blur-md": assetListIsExpanded}' @click='toggleAssetExpansionState()'>

          <svg xmlns="http://www.w3.org/2000/svg" class='icon-sm mr-1 transform transition-all rotate-180 duration-700' :class='{"rotate-0": assetListIsExpanded}' fill="currentColor" viewBox="0 0 256 256"><rect width="256" height="256" fill="none"></rect><polyline points="48 160 128 80 208 160" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"></polyline></svg>

          <span class='whitespace-nowrap'>
            <span x-show='!assetListIsExpanded'>
              {{ 'buttonLabelShowMore' | i18n(lang) }}
            </span>
            <span x-show='assetListIsExpanded'>
              {{ 'buttonLabelShowLess' | i18n(lang) }}
            </span>
          </span>

        </button>
      </div>

    </div>

    <div class='form-group'>
      <h2>6. {{ 'sectionTitle7thStepPrayer' | i18n(lang) }}</h2>
      <p class='hint'>{{ 'sectionHint7thStepPrayer' | i18n(lang) }}</p>

      <div x-show='!hasSelectedDefects'>
        <p class='px-4 py-4 rounded-lg border-2 border-dashed border-slate-200 dark:border-slate-500 text-semibold text-xl text-slate-300 dark:text-slate-500 text-center'>{{ 'emptyPrayerPlaceholder' | i18n(lang) }}</p>
      </div>

      <div class='flex items-start mt-3' x-show='hasSelectedDefects'>
        <p class='font-serif text-7xl mr-3 text-slate-300'>"</p>
        <div class='italic mt-1' >
          <p class=''>{{ '7thStepPrayerSegment1' | i18n(lang) }},
          <p>{{ '7thStepPrayerSegment2' | i18n(lang) }}</p>
          <p class='font-bold mt-2'>{{ '7thStepPrayerSegment3' | i18n(lang) }}</p>

          <p class='mt-4'>{{ '7thStepPrayerSegment4' | i18n(lang) }}</br>
          <span class='font-bold' x-text='defectString'></span>
          </p>

          <p class='mt-4'>{{ '7thStepPrayerSegment5' | i18n(lang) }}</br><span class='font-bold' x-text='assetString'></span></p>
          <p class='mt-4'>{{ '7thStepPrayerSegment6' | i18n(lang) }}</p>
        </div>
      </div>

    </div>

     <div class='form-group'>
      <h2>7. {{ 'sectionTitleAmends' | i18n(lang) }}</h2>
      <p class='hint'>
        {{ 'sectionHintAmends' | i18n(lang) }}
      </p>

      <input x-model='hasAmends' id='no-amends' type='radio' name='amends-required' value='no' class='appearance-none opacity-0 absolute'>
      <input x-model='hasAmends' id='yes-amends' type='radio' name='amends-required' value='yes' class='appearance-none opacity-0 absolute'>
      <div class='flex'>
        <label for='no-amends' class='selection-panel mr-1' :class='hasAmends == "no" && "selected"'>
          {{ 'buttonLabelNo' | i18n(lang) }}
        </label>

          <label for='yes-amends' class='selection-panel ml-1' :class='hasAmends == "yes" && "selected"'>
            {{ 'buttonLabelYes' | i18n(lang) }}
        </label>
      </div>

      <div x-collapse x-show='hasAmends == "yes"' class='mt-2'>
        <label for='amend-details' class='block mb-1 font-semibold text-slate-700 dark:text-slate-300 mt-4'>
          {{ 'fieldLabelAmendsToMake' | i18n(lang) }}
        </label>
        <textarea x-autosize x-model='amendsDetails' name="amend-details" id="amend-details" cols="30" rows="1" class='w-full'></textarea>
      </div>

    </div>


    <div class='form-group'>
      <label for='help-details' class='h2'>8. {{ 'sectionTitleWhoCanYouHelp' | i18n(lang) }}</label>
       <p class='hint mb-1'>{{ 'sectionHintWhoCanYouHelp' | i18n(lang) }}</p>
      <textarea x-autosize x-model='helpDetails' name="help-details" id="help-details" cols="30" rows="1" class='w-full'></textarea>
       <p class='hint italic mt-2'>
        {{ 'sectionWrapupWhoCanYouHelp' | i18n(lang) }}
      </p>
    </div>

     <div class='form-group'>
      <h2>9. {{ 'sectionTitleShare' | i18n(lang) }} </h2>
      <p class='hint'>
        {{ 'sectionHintShare' | i18n(lang) }}
      </p>
    </div>


    <div class='form-group'>
      <h2>10. {{ 'sectionTitleDone' | i18n(lang) }}</h2>
      <p class='hint'>
        {{ 'sectionHintDone' | i18n(lang) }}
      </p>

      <button
        type="button"
        id='copy-to-clipboard-button'
        class='text-sm hidden transition-all bg-gradient-to-br  filter hover:brightness-110  text-white py-2 rounded-lg mt-4 font-semibold'
        :class='{
          "bg-green-600 from-green-600 to-green-700": !copyTextFailed && copyTextSucceeded,
          "bg-red-600 from-red-600 to-red-700": copyTextFailed,
          "bg-blue-600 from-blue-500 to-blue-600 dark:from-blue-600 dark:to-blue-800": !copyTextFailed && !copyTextSucceeded }'
        :data-clipboard-text='clipboardText'
        onclick='window.fathom?.trackGoal("GKLXRGR7", 0);'>

        <span x-show='copyTextFailed'>
          {{ 'notificationCopyError' | i18n(lang) }}
        </span>

        <span x-show='!copyTextFailed && copyTextSucceeded'>
          {{ 'notificationCopySuccess' | i18n(lang) }}
        </span>
        <span x-show='!copyTextFailed && !copyTextSucceeded'>
          {{ 'buttonLabelCopyToClipboard' | i18n(lang) }}
        </span>
      </button>

    <button
      x-show='shareButtonSupported'
      type="button"
      id='share-button'
      class='text-sm transition-all  filter hover:brightness-110 py-2 rounded-lg mt-4 font-semibold text-blue-900 bg-slate-100 dark:text-slate-200 dark:bg-slate-700 dark:hover:bg-slate-600 hover:bg-slate-200'
      onclick='window.fathom?.trackGoal("D678PKNV", 0);'
      @click='shareButtonClicked()'>
      <span>
        {{ 'buttonLabelShare' | i18n(lang) }}
      </span>
    </button>

       <button
          @click='resetButtonClicked()'
          type="button"
          class='text-sm transition-all py-2 rounded-lg mt-4 font-semibold'
          :class='resetButtonArmed ? "text-white bg-red-500 hover:bg-red-600" : "text-blue-900 bg-slate-100 dark:text-slate-200 dark:bg-slate-700 dark:hover:bg-slate-600 hover:bg-slate-200"'>

         <span x-show='!resetButtonArmed'>
          {{ 'buttonLabelClearForm' | i18n(lang) }}
         </span>

         <span x-show='resetButtonArmed'>
          {{ 'buttonLabelAreYouSure' | i18n(lang) }}
         </span>
      </button>
    </div>
  <form>

<a href='mailto:michoel+rapidstep10@hey.com' class='pt-4 font-bold underline text-slate-700 dark:text-slate-200 dark:hover:text-slate-300 hover:text-slate-900 pb-4 block text-center text-sm'>
  {{ 'buttonLabelSendFeedback' | i18n(lang) }}
</a>
</form>


<div class='my-4'>
  <h2 class='text-slate-600 dark:text-slate-100 text-center font-bold'>
    {{ 'languagePickerPrefix' | i18n(lang) }}
  </h2>
  <div class='grid grid-cols-4 flex-wrap gap-2 mt-2'>
    {% for l in configuredLanguages %}
      <a href='{{ l.path }}' class='font-semibold flex items-center text-slate-700 hover:text-slate-900 hover:bg-slate-200/80   dark:text-slate-300 dark:hover:text-slate-100 dark:hover:bg-slate-800/80  rounded-lg px-3 py-3 cursor-pointer'>
        <div class='w-6 h-6 rounded-full overflow-hidden relative mx-2'>
          {{ l.icon | svgContents('h-6 block object-cover -translate-x-[16%]') | safe }}
        </div>
        {{ l.title }}
      </a>
    {% endfor %}
  </div>
</div>

<a href='https://razorux.com/?utm_campaign=rs10&utm_source=rapidstep10.com&utm_medium=agency-badge-link' target='_blank' noopener class='block flex justify-center'
onclick='window.fathom?.trackGoal("7BSCD1ZC", 0);'>
  <img src='/razorUX%20Badge%20-%20Light.svg'' class='h-28 dark:hidden hover:scale-105 transition-all'/>
  <img src='/razorUX%20Badge%20-%20Dark.svg'' class='hidden dark:block h-28 hover:brightness-[130%] hover:scale-105 transition-all'/>
</a>

<script>
   window.addEventListener('DOMContentLoaded', () => {
     const copyToClipboardButtonId = '#copy-to-clipboard-button';
     var clipboard = new ClipboardJS(copyToClipboardButtonId);

     document.querySelector(copyToClipboardButtonId).classList.remove('hidden');

     clipboard.on('success', function(e) {
       window.dispatchEvent(new CustomEvent('clipboard-success'));
    });

    clipboard.on('error', function(e) {
      window.dispatchEvent(new CustomEvent('clipboard-error'));
    });


   });
</script>


<script>
  var count = 400;
  var defaults = {
    origin: { y: 0.7 }
  };

  function fire(particleRatio, opts) {
    confetti(Object.assign({}, defaults, opts, {
      particleCount: Math.floor(count * particleRatio)
    }));
  }

  function launchConfetti() {
    fire(0.25, {
      spread: 26,
      startVelocity: 55,
    });
    fire(0.2, {
      spread: 60,
    });
    fire(0.35, {
      spread: 100,
      decay: 0.91,
      scalar: 0.8
    });
    fire(0.1, {
      spread: 120,
      startVelocity: 25,
      decay: 0.92,
      scalar: 1.2
    });
    fire(0.1, {
      spread: 120,
      startVelocity: 45,
    });
     fire(0.2, {
      spread: 120,
      startVelocity: 60,
    });
    fire(0.6, {
      spread: 120,
      startVelocity: 75,
       decay: 0.91,
    });
  }

</script>
